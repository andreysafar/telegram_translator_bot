import os
import logging
import asyncio
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, filters
)
from telegram.constants import ParseMode

from config import *
from user_storage import UserStorage
from openrouter_service import OpenRouterService
from language_detector import LanguageDetector

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramTranslatorBot:
    def __init__(self):
        self.user_storage = UserStorage()
        self.openrouter_service = OpenRouterService()
        self.language_detector = LanguageDetector()
        
        # Group chat enable list (admin can add/remove groups)
        self.enabled_groups = set()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        chat = update.effective_chat
        
        # Create or get user settings
        user_settings = self.user_storage.get_user(user.id)
        if user.username:
            self.user_storage.update_user(user.id, username=user.username)
        
        if chat.type == 'private':
            welcome_message = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É:
üá∑üá∫ –†—É—Å—Å–∫–∏–º
üáπüá≠ –¢–∞–π—Å–∫–∏–º  
üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–º

**–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**
1. –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫
2. –ü–µ—Ä–µ–≤–æ–∂—É —á–µ—Ä–µ–∑ OpenRouter API
3. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç

**–ö–æ–º–∞–Ω–¥—ã:**
/lang <ru|th|en> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
/help - —Å–ø—Ä–∞–≤–∫–∞

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞:**
/config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞)
/enable - –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞)
/disable - –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞)

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
            """
        else:
            welcome_message = f"""
ü§ñ –ë–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –≥—Ä—É–ø–ø–µ!

–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /enable
            """
        
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ, —Ç–∞–π—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/lang <ru|th|en> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞:**
/config - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞)
/enable - –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞)
/disable - –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–æ—Ç–∞)

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥:**
1. üì• –ü–æ–ª—É—á–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. üîç –û–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π/—Ç–∞–π—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
3. üîÑ –ü–µ—Ä–µ–≤–æ–∂—É —á–µ—Ä–µ–∑ OpenRouter API
4. üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –≤–∫–ª—é—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /enable!
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def lang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /lang command to set native language"""
        user = update.effective_user
        
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lang <ru|th|en>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/lang ru - —Ä—É—Å—Å–∫–∏–π\n"
                "/lang th - —Ç–∞–π—Å–∫–∏–π\n"
                "/lang en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
            )
            return
        
        lang_code = context.args[0].lower()
        if lang_code not in SUPPORTED_LANGUAGES:
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {lang_code}\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: ru, th, en"
            )
            return
        
        self.user_storage.set_native_language(user.id, lang_code)
        lang_name = SUPPORTED_LANGUAGES[lang_code]
        
        await update.message.reply_text(
            f"‚úÖ –†–æ–¥–Ω–æ–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_name}"
        )
    
    async def config_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /config command - admin only"""
        user = update.effective_user
        
        # Check if user is bot admin
        if user.id not in ADMIN_USER_IDS:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ /config –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)**\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/config model <model_name> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                "/config stt <model_name> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏\n"
                "/config show - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
                "‚Ä¢ claude-3.5-sonnet\n"
                "‚Ä¢ gpt-4o\n"
                "‚Ä¢ gpt-4o-mini\n"
                "‚Ä¢ gemini-pro-1.5\n"
                "‚Ä¢ llama-3.1-70b-instruct\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ STT:\n"
                "‚Ä¢ whisper-large-v3\n"
                "‚Ä¢ whisper-1",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        action = context.args[0].lower()
        
        if action == "show":
            # Show current settings for the group/user
            settings = self.user_storage.get_user(user.id)
            await update.message.reply_text(
                f"üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
                f"ü§ñ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞: {settings['translation_model'].split('/')[-1]}\n"
                f"üé§ –ú–æ–¥–µ–ª—å STT: {settings['stt_model'].split('/')[-1]}",
                parse_mode=ParseMode.MARKDOWN
            )
        elif action == "model" and len(context.args) > 1:
            model_name = context.args[1]
            full_model = None
            
            # Find full model name
            for model in AVAILABLE_TRANSLATION_MODELS:
                if model.endswith(model_name) or model_name in model:
                    full_model = model
                    break
            
            if not full_model:
                await update.message.reply_text(
                    f"‚ùå –ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: claude-3.5-sonnet, gpt-4o, gpt-4o-mini, gemini-pro-1.5, llama-3.1-70b-instruct"
                )
                return
            
            self.user_storage.set_translation_model(user.id, full_model)
            await update.message.reply_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {full_model.split('/')[-1]}"
            )
        elif action == "stt" and len(context.args) > 1:
            model_name = context.args[1]
            full_model = None
            
            # Find full model name
            for model in AVAILABLE_STT_MODELS:
                if model.endswith(model_name) or model_name in model:
                    full_model = model
                    break
            
            if not full_model:
                await update.message.reply_text(
                    f"‚ùå –ú–æ–¥–µ–ª—å STT '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: whisper-large-v3, whisper-1"
                )
                return
            
            self.user_storage.set_stt_model(user.id, full_model)
            await update.message.reply_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å STT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {full_model.split('/')[-1]}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /config –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def enable_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Enable bot in group - admin only"""
        chat = update.effective_chat
        user = update.effective_user
        
        # Check if user is bot admin
        if user.id not in ADMIN_USER_IDS:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ /enable –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"
            )
            return
        
        if chat.type == 'private':
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ /enable —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"
            )
            return
        
        self.enabled_groups.add(chat.id)
        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
    
    async def disable_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Disable bot in group - admin only"""
        chat = update.effective_chat
        user = update.effective_user
        
        # Check if user is bot admin
        if user.id not in ADMIN_USER_IDS:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ /disable –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞"
            )
            return
        
        if chat.type == 'private':
            await update.message.reply_text(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ /disable —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"
            )
            return
        
        self.enabled_groups.discard(chat.id)
        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages"""
        if not update.message or not update.message.text:
            return
        
        chat = update.effective_chat
        user = update.effective_user
        text = update.message.text
        
        # Skip if message is a command
        if text.startswith('/'):
            return
        
        # For group chats, check if bot is enabled
        if chat.type != 'private' and chat.id not in self.enabled_groups:
            return
        
        # Get user settings
        user_settings = self.user_storage.get_user(user.id)
        
        # Detect language
        source_language = self.language_detector.detect_language(
            text, user_settings['native_language']
        )
        
        # Determine target language
        target_language = self.language_detector.determine_target_language(
            source_language, user_settings['native_language']
        )
        
        # Skip translation if source and target are the same
        if source_language == target_language:
            return
        
        # Show typing indicator
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        # Perform translation
        translation_result = self.openrouter_service.perform_translation_chain(
            text=text,
            source_lang=source_language,
            target_lang=target_language,
            translation_model=user_settings['translation_model']
        )
        
        if translation_result.get('error'):
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {translation_result['error']}"
            )
            return
        
        # Format and send translation result
        await self.send_translation_result(update, translation_result)
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle voice messages"""
        if not update.message or not update.message.voice:
            return
        
        chat = update.effective_chat
        user = update.effective_user
        
        # For group chats, check if bot is enabled
        if chat.type != 'private' and chat.id not in self.enabled_groups:
            return
        
        user_settings = self.user_storage.get_user(user.id)
        
        try:
            # Show typing indicator
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action="typing"
            )
            
            # Download voice file
            voice_file = await update.message.voice.get_file()
            voice_path = f"voice_{user.id}_{update.message.message_id}.ogg"
            await voice_file.download_to_drive(voice_path)
            
            # Convert to text
            recognized_text = self.openrouter_service.speech_to_text(
                voice_path, user_settings['stt_model']
            )
            
            # Clean up file
            if os.path.exists(voice_path):
                os.remove(voice_path)
            
            if not recognized_text:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                return
            
            # Send recognized text
            await update.message.reply_text(
                f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n_{recognized_text}_",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Detect language and translate
            source_language = self.language_detector.detect_language(
                recognized_text, user_settings['native_language']
            )
            
            target_language = self.language_detector.determine_target_language(
                source_language, user_settings['native_language']
            )
            
            if source_language == target_language:
                return
            
            # Perform translation
            translation_result = self.openrouter_service.perform_translation_chain(
                text=recognized_text,
                source_lang=source_language,
                target_lang=target_language,
                translation_model=user_settings['translation_model']
            )
            
            if translation_result.get('error'):
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {translation_result['error']}"
                )
                return
            
            # Format and send translation result
            await self.send_translation_result(update, translation_result)
            
        except Exception as e:
            logger.error(f"Voice processing error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def send_translation_result(self, update: Update, result: dict):
        """Format and send translation result"""
        # Language flags
        FLAGS = {
            'ru': 'üá∑üá∫',
            'en': 'üá¨üáß',
            'th': 'üáπüá≠'
        }
        
        source_lang = result['source_language']
        target_lang = result['target_language']
        
        # Build message parts
        message_parts = []
        
        # Always show English translation
        if source_lang == 'en':
            message_parts.append(f"üá¨üáß {result['original']}")
        elif target_lang == 'en':
            message_parts.append(f"üá¨üáß {result['final_translation']}")
        else:
            message_parts.append(f"üá¨üáß {result['english_translation']}")
        
        # Show target language translation (if not English)
        if target_lang != 'en':
            message_parts.append(f"{FLAGS[target_lang]} {result['final_translation']}")
        
        # Add empty line before original text
        message_parts.append("")
        
        # Show original text with flag
        message_parts.append(f"{FLAGS[source_lang]} {result['original']}")
        
        formatted_message = "\n".join(message_parts)
        
        await update.message.reply_text(
            formatted_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_to_message_id=update.message.message_id
        )
    
    def create_application(self) -> Application:
        """Create and configure the Telegram application"""
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("lang", self.lang_command))
        application.add_handler(CommandHandler("config", self.config_command))
        application.add_handler(CommandHandler("enable", self.enable_command))
        application.add_handler(CommandHandler("disable", self.disable_command))
        
        # Text message handler (excluding commands)
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message)
        )
        
        # Voice message handler
        application.add_handler(
            MessageHandler(filters.VOICE, self.handle_voice_message)
        )
        
        return application
    
    async def run(self):
        """Run the bot"""
        application = self.create_application()
        
        logger.info("Starting Telegram Translator Bot...")
        
        # Start the bot
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        logger.info("Bot is running. Press Ctrl+C to stop.")
        
        try:
            # Keep the bot running
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("Stopping bot...")
        finally:
            await application.updater.stop()
            await application.stop()
            await application.shutdown()

# Function to run the bot
async def main():
    bot = TelegramTranslatorBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())